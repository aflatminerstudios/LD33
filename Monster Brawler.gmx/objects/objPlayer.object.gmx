<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Base variable setup

playerNum = instance_number(objPlayer);

facing = 1;

sprite = sprPlayer;
spriteRunning = sprPlayerRunning;
spriteJumping = sprPlayerJumping;
spriteFalling = sprPlayerFalling;
spriteAction1 = sprPlayerPunch;
spriteAction2 = sprBoneThrow;

cdTimer1 = 0;
cdTimer2 = 0;

isAction = false;

//List of actions
actionList = ds_map_create();

//Life
maxHp = 100;
hp = maxHp;

//For costumes
costume = noone;

//Varibles used in movement
force = 1000;
maxSpeed = 300;

//Jumping variables
// Base is 400
jumpHeight = 450;
deltaTime = 1/room_speed;
gm = 10 * 5 * phy_mass;
//jumpForce = sqrt(2 * gravity * (jumpHeight)) + gravity * deltaTime * 0.5;
jumpForce = (sqrt(2 * gm * (jumpHeight)) + gm * deltaTime * 0.5);
minJumpSpeedUp = 250;
jumpDownRangeBottom = 50;
jumpDownRangeTop = 250;
jumpTimeRemaining = 0;
isJumping = false;

isFalling = false;
canJump = true;
beenReleased = true;

//For player controls
upKey = 0;
downKey = 0;
leftKey = 0;
rightKey = 0;
action1Key = 0;
action2Key = 0;
jumpKey = 0;

//Left stick, probably
hAxisPad = 0;
vAxisPad = 0;

action1Pad = 0;
action2Pad = 0;
jumpPad = 0;

padNum = 0;

isIdle = true;

image_speed = 30 / room_speed;

tint = c_white;

action1Sound[0] = sndSkeletonPunch1;
action1Sound[1] = sndSkeletonPunch2;
action2Sound[0] = sndBoneThrow1;
action2Sound[1] = sndBoneThrow2;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Action1 variables
action1 = ds_map_create();
ds_map_add(action1, "damage", 10);
ds_map_add(action1, "knockback", 200);
ds_map_add(action1, "numFrames", 5);

//Size
ds_map_add(action1,"xSize", 24);
ds_map_add(action1, "ySize", 9);

//Parent object and distance from parent x,y to "topleft" corner, as well as angle
ds_map_add(action1, "xDist", 14);
ds_map_add(action1, "yDist", -38);

cooldown1 = room_speed / 3;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Action2 variables

action2 = ds_map_create();

ds_map_add(action2, "damage", 5);
ds_map_add(action2, "knockback", 200);

ds_map_add(action2, "sprite", sprBone);

//Parent object and distance from parent x,y to "topleft" corner
ds_map_add(action2, "xDist", sprite_width/2 - 10);
ds_map_add(action2, "yDist", -40);

//Direct object throwing
ds_map_add(action2, "xForce", 2);
ds_map_add(action2, "yForce", -8);
ds_map_add(action2, "xOffset", 3);
ds_map_add(action2, "yOffset", -1);

cooldown2 = room_speed / 3;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Script variables

getAction = scrGetPlayerAction;

getLeft = scrGetPlayerLeft;
getRight = scrGetPlayerRight;
getJump = scrGetPlayerJump;
getUp = scrGetPlayerUp;
getJumpReleased = scrGetPlayerJumpRelease;
getUpReleased = scrGetPlayerUpRelease;
getAction1 = scrGetPlayerAction1;
getAction2 = scrGetPlayerAction2;
getUpHold = scrGetPlayerUpHold;
getDown = scrGetPlayerDown;

doAction1 = scrPunch;
doAction2 = scrThrow;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///"Current" variables

curForce = force;
curMaxSpeed = maxSpeed;
curMaxHp = maxHp;
curDoAction1 = doAction1;
curDoAction2 = doAction2;
curAction1 = action1;
curAction2 = action2;

curCooldown1 = cooldown1;
curCooldown2 = cooldown2;

curSprite = sprite;
curSpriteRunning = spriteRunning;
curSpriteJumping = spriteJumping;
curSpriteFalling = spriteFalling;
curSpriteAction1 = spriteAction1;
curSpriteAction2 = spriteAction2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clear input

keyboard_clear(vk_anykey);

gamepad_set_axis_deadzone(0, 0.3);
gamepad_set_axis_deadzone(1, 0.3);

for (i = 0; i &lt; 1; i++) {
  gamepad_button_check_pressed(i, gp_face1);
  gamepad_button_check_pressed(i, gp_face2);
  gamepad_button_check_pressed(i, gp_face3);
  gamepad_button_check_pressed(i, gp_face4);

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create AI variables


//currentGoals will have 3 items in this order: node, target, and step of path
currentGoals = ds_list_create();

//goals is a list of nodes in the order the player should travel
goals = ds_list_create();
previousNode = noone;


//Used for jumping
jumpWait = -2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hack to see if in action or falling

var found = false;

with (objAttack) {
  if (!is_undefined(parent) &amp;&amp; parent == other.id) {
    found = true;
  }
}

if (!found)  {
  isAction = false;
}
var offset = 5;

if (sprite_index = sprWerewolfFall || sprite_index = sprDBFall) {
  offset = 10;
}

var col = collision_rectangle(x - sprite_width / 2 , y + offset, x + sprite_width / 2, y + offset + 40, objPlayer, true, true);
var col2 = collision_rectangle(x - sprite_width / 2 , y + offset, x + sprite_width / 2, y + offset + 40, objTile, true, true);

if (col != noone || col2 != noone) {
  isFalling = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hack for jump/fall animation stopping
if (isFalling || isJumping) {

  var sl = sprite_get_number(sprite_index);

  if ((sl - 1) == image_index) {
    image_speed = 0;
  } else {
    image_speed = 30 / room_speed;
  }

} else {
  image_speed = 30 / room_speed;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check player actions
//calc_accel = (maxspeed/friction - maxspeed) / deltaTime
//calc_jumpforce = sqrt(2 * gravity * (jumpheight)) + gravity * deltaTime * 0.5

isIdle = true;

phy_rotation = 0;
phy_fixed_rotation = true;

/*
if (keyboard_check(rightKey)) {
  physics_apply_force(x, y, 200, 0);
  
  if (phy_linear_velocity_x &gt;= 200) {
    phy_linear_velocity_x = 200;
  }
}

if (keyboard_check(leftKey)) {
  physics_apply_force(x, y, -200, 0);  
  
  if (phy_linear_velocity_x &lt;= -200) {
    phy_linear_velocity_x = -200;
  }
}
*/
//ds_map_add(actionList, "Say", string(isJumping) + " " + string(isFalling) + " " + string(isAction) + " ")
script_execute(getAction);
scrProcessAction(self.id);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control jumping


if (phy_linear_velocity_y &gt; 0){
  physics_apply_impulse(x, y, 0, 10);
}

// Helps make sure jumping doesn't stop with initial floor collision
if (isJumping) {
  jumpTimeRemaining--; 
  
  if (jumpTimeRemaining &gt;= 0 &amp;&amp; jumpTimeRemaining % 5 == 0 &amp;&amp; !beenReleased) {
    physics_apply_impulse(x, y,0 , -1 * jumpForce/4);
    isFalling = false;
  }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Manage cooldowns

cdTimer1--;
cdTimer2--;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle jumping/falling sprites

if (phy_linear_velocity_y &gt; 0 &amp;&amp; sprite_index != curSpriteFalling &amp;&amp; !place_meeting(x, y + 5, objTile) &amp;&amp; !isAction) {

  //So much hack in that if statement
  
  
  sprite_index  = curSpriteFalling;
  isIdle = false;
  isFalling = true;
  
} else if (isJumping &amp;&amp; !isFalling &amp;&amp; sprite_index != curSpriteJumping &amp;&amp; !isAction) {

  sprite_index = curSpriteJumping;
  isIdle = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change to idle sprite if appropriate
if (isIdle &amp;&amp; sprite_index != curSprite &amp;&amp; !isJumping &amp;&amp; !isAction) {
  if (isFalling &amp;&amp; !place_meeting(x, y + 5, objTile) &amp;&amp; !place_meeting(x, y + 5, objPlayer)) {
    // Do nothing
    // Hackity hack! Don't talk back!
  } else {
    sprite_index = curSprite;
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objFloor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop jumping

if (isJumping) {
  if (other.y + 1 &gt; y &amp;&amp; jumpTimeRemaining &lt;= 0) {
    isJumping = false;
    canJump = true;
    isFalling = false;
  } 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objAttack">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Can collide with attacks
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objCostume">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change "current" variables

audio_play_sound(sndCostumeChange, 1, false);

if (costume != noone) {
  with (costume) {
    instance_destroy();
  }
}

other.parent = self.id;

curForce = other.force;
curMaxspeed = other.maxSpeed;

var hpPer = hp / curMaxHp;
curMaxHp = other.maxHp;
hp = hpPer * curMaxHp;

costume = other.id;

curDoAction1 = other.doAction1;
curDoAction2 = other.doAction2;
curAction1 = other.action1;
curAction2 = other.action2;

switch(sprite_index) {
  case curSprite:
    sprite_index = other.sprite;
    break;
    
  case curSpriteRunning:
    sprite_index = other.spriteRunning;
    break;
    
  case curSpriteJumping:
    sprite_index = other.spriteJumping;
    break;
    
  case curSpriteFalling:
    sprite_index = other.spriteFalling;
    break;
    
  default:
    sprite_index = other.sprite;
    break;
}

curSprite = other.sprite;
curSpriteRunning = other.spriteRunning;
curSpriteJumping = other.spriteJumping;
curSpriteFalling = other.spriteFalling;
curSpriteAction1 = other.spriteAction1;
curSpriteAction2 = other.spriteAction2;


curCooldown1 = other.cooldown1;
curCooldown2 = other.cooldown2;


with (other) {
  x = -500;
  y = -500;
  phy_position_x = -500;
  phy_position_y = -500;
  alarm[0] = time;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop jumping

if (isJumping) {
  if (other.y &gt; (y - sprite_height) &amp;&amp; jumpTimeRemaining &lt;= 0) {
    isJumping = false;
    canJump = true;
    isFalling = false;
  } 
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collides with players
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw health bar

scrDrawHealthbar(self.id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.0500000007450581</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.300000011920929</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>72,8</point>
    <point>72,80</point>
    <point>8,80</point>
  </PhysicsShapePoints>
</object>
