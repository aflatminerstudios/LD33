<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Base variable setup

playerNum = instance_number(objPlayer);

facing = 1;

sprite = sprPlayer;

//List of actions
actionList = ds_map_create();

//Life
maxHp = 100;
hp = maxHp;

//For costumes
costume = noone;

//Varibles used in movement
force = 1000;
maxSpeed = 300;

//Jumping variables
// Base is 600
jumpHeight = 600;
deltaTime = 1/room_speed;

jumpForce = (sqrt(2 * gravity.y * (jumpHeight)) + gravity.y * deltaTime * 0.5);
minJumpSpeedUp = 250;
jumpDownRangeBottom = 50;
jumpDownRangeTop = 250;
jumpTimeRemaining = 0;
isJumping = false;
canJump = true;


//For player controls
upKey = 0;
downKey = 0;
leftKey = 0;
rightKey = 0;
action1Key = 0;
action2Key = 0;
jumpKey = 0;

//Left stick, probably
hAxisPad = 0;
vAxisPad = 0;

action1Pad = 0;
action2Pad = 0;
jumpPad = 0;

padNum = 0;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Action1 variables
action1 = 0;
action1.damage = 10;
action1.scriptCall = 0;
action1.scriptParams = 0;
action1.knockback = 200;
action1.numFrames = 5;

//Size
action1.xSize = 20;
action1.ySize = 10;

//Parent object and distance from parent x,y to "topleft" corner, as well as angle
action1.xDist = 33;
action1.yDist = -40;
action1.angle = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Action2 variables

action2 = 0;

action2.damage = 5;
action2.scriptCall = 0;
action2.scriptParams = 0;
action2.knockback = 200;

action2.sprite = sprBone;

//Parent object and distance from parent x,y to "topleft" corner
action2.xDist = 40;
action2.yDist = -40;

//Direct object throwing
action2.xForce = 7;
action2.yForce = -8;
action2.xOffset = 5;
action2.yOffset = 0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Script variables

getAction = scrGetPlayerAction;

getLeft = scrGetPlayerLeft;
getRight = scrGetPlayerRight;
getJump = scrGetPlayerJump;
getUp = scrGetPlayerUp;
getAction1 = scrGetPlayerAction1;
getAction2 = scrGetPlayerAction2;

doAction1 = scrPunch;
doAction2 = scrThrow;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///"Current" variables

curForce = force;
curMaxSpeed = maxSpeed;
curMaxHp = maxHp;
curDoAction1 = doAction1;
curDoAction2 = doAction2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check player actions
//calc_accel = (maxspeed/friction - maxspeed) / deltaTime
//calc_jumpforce = sqrt(2 * gravity * (jumpheight)) + gravity * deltaTime * 0.5


phy_rotation = 0;
phy_fixed_rotation = true;

/*
if (keyboard_check(rightKey)) {
  physics_apply_force(x, y, 200, 0);
  
  if (phy_linear_velocity_x &gt;= 200) {
    phy_linear_velocity_x = 200;
  }
}

if (keyboard_check(leftKey)) {
  physics_apply_force(x, y, -200, 0);  
  
  if (phy_linear_velocity_x &lt;= -200) {
    phy_linear_velocity_x = -200;
  }
}
*/

script_execute(getAction);
scrProcessAction(self.id);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control jumping


if (phy_linear_velocity_y &gt; 0){
  physics_apply_impulse(x, y, 0, 10);
}

// Helps make sure jumping doesn't stop with initial floor collision
if (isJumping) {
  jumpTimeRemaining--; 
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objAttack">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Can collide with attacks
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objCostume">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change "current" variables

other.parent = self.id;

curForce = other.force;
curMaxspeed = other.maxSpeed;

curMaxHp = other.maxHp;
hp = min(hp, curMaxHp);

costume = other.id;

curDoAction1 = other.doAction1;
curDoAction2 = other.doAction2;

sprite_index = other.sprite;

with (other) {
  x = -500;
  y = -500;
  phy_position_x = -500;
  phy_position_y = -500;
  alarm[0] = time;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collides with players
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objFloor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop jumping

if (isJumping) {
  if (other.y &gt; y &amp;&amp; jumpTimeRemaining &lt;= 0) {
    isJumping = false;
    canJump = true;
  } 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.400000005960464</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
