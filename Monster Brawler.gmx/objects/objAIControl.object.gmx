<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create node array

nodes[0] = instance_create(120, 640, objNavNode);
nodes[1] = instance_create(620, 640, objNavNode);
nodes[2] = instance_create(1120, 640, objNavNode);
nodes[3] = instance_create(920, 440, objNavNode);
nodes[4] = instance_create(320, 440, objNavNode);
nodes[5] = instance_create(640, 240, objNavNode);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize nodes in array
//indices contains the index of the other node in the nodes array
//costs is the cost to that node

//paths contain the paths, paths are sets of 2, 
// a descriptor and a list that contains the additional data

/*
"MoveHorizontal"  Data is x of target followed by y of target
"Jump"  Data is how many frames before moving towards x, target x, target y

*/

nodes[0].indices[0] = 1;
nodes[0].costs[0] = 5;
nodes[0].paths[0,0] = "MoveHorizontal";
nodes[0].paths[0,1] = ds_list_create();
ds_list_add(nodes[0].paths[0,1], 620, 640);    

nodes[0].indices[1] = 4;
nodes[0].costs[1] = 5; 
nodes[0].paths[1, 0] = "MoveHorizontal";
nodes[0].paths[1, 1] = ds_list_create();
ds_list_add(nodes[0].paths[1,1], 180, 640);
nodes[0].paths[1, 2] = "Jump";
nodes[0].paths[1, 3] = ds_list_create();
ds_list_add(nodes[0].paths[1,3], room_speed / 20, 260, 440);
nodes[0].paths[1, 4] = "MoveHorizontal";
nodes[0].paths[1, 5] = ds_list_create();
ds_list_add(nodes[0].paths[1,5], 320, 440);


nodes[1].indices[0] = 0;
nodes[1].costs[0] = 5;
nodes[1].paths[0,0] = "MoveHorizontal";
nodes[1].paths[0,1] = ds_list_create();
ds_list_add(nodes[1].paths[0,1], 120, 640);    

nodes[1].indices[1] = 2;
nodes[1].costs[1] = 5;
nodes[1].paths[1,0] = "MoveHorizontal";
nodes[1].paths[1,1] = ds_list_create();
ds_list_add(nodes[1].paths[1,1], 1120, 640);

nodes[1].indices[2] = 3;
nodes[1].costs[2] = 5;
nodes[1].paths[2, 0] = "MoveHorizontal";
nodes[1].paths[2, 1] = ds_list_create();
ds_list_add(nodes[1].paths[2,1], 700, 600);
nodes[1].paths[2, 2] = "Jump";
nodes[1].paths[2, 3] = ds_list_create();
ds_list_add(nodes[1].paths[2,3], room_speed / 20, 800, 440);
nodes[1].paths[2, 4] = "MoveHorizontal";
nodes[1].paths[2, 5] = ds_list_create();
ds_list_add(nodes[1].paths[2,5], 920, 440);

nodes[1].indices[3] = 4;
nodes[1].costs[3] = 5;
nodes[1].paths[3, 0] = "MoveHorizontal";
nodes[1].paths[3, 1] = ds_list_create();
ds_list_add(nodes[1].paths[3,1], 500, 640);
nodes[1].paths[3, 2] = "Jump";
nodes[1].paths[3, 3] = ds_list_create();
ds_list_add(nodes[1].paths[3,3], room_speed / 20, 360, 440);
nodes[1].paths[3, 4] = "MoveHorizontal";
nodes[1].paths[3, 5] = ds_list_create();
ds_list_add(nodes[1].paths[3,5], 320, 440);

nodes[2].indices[0] = 1;
nodes[2].costs[0] = 5;
nodes[2].paths[0,0] = "MoveHorizontal";
nodes[2].paths[0,1] = ds_list_create();
ds_list_add(nodes[2].paths[0,1], 620, 640);   

nodes[2].indices[1] = 3;
nodes[2].costs[1] = 5; 
nodes[2].paths[1, 0] = "MoveHorizontal";
nodes[2].paths[1, 1] = ds_list_create();
ds_list_add(nodes[2].paths[1,1], 1100, 600);
nodes[2].paths[1, 2] = "Jump";
nodes[2].paths[1, 3] = ds_list_create();
ds_list_add(nodes[2].paths[1,3], room_speed / 20, 800, 440);
nodes[2].paths[1, 4] = "MoveHorizontal";
nodes[2].paths[1, 5] = ds_list_create();
ds_list_add(nodes[2].paths[1,5], 720, 920, 440);

nodes[3].indices[0] = 1;
nodes[3].costs[0] = 5;
nodes[3].paths[0,0] = "MoveHorizontal";
nodes[3].paths[0,1] = ds_list_create();
ds_list_add(nodes[3].paths[0,1], 620, 640);

nodes[3].indices[1] = 5;
nodes[3].costs[1] = 5; 
nodes[3].paths[1, 0] = "MoveHorizontal";
nodes[3].paths[1, 1] = ds_list_create();
ds_list_add(nodes[3].paths[1,1], 800, 440);
nodes[3].paths[1, 2] = "Jump";
nodes[3].paths[1, 3] = ds_list_create();
ds_list_add(nodes[3].paths[1,3], room_speed / 15, 680, 240);
nodes[3].paths[1, 4] = "MoveHorizontal";
nodes[3].paths[1, 5] = ds_list_create();
ds_list_add(nodes[3].paths[1,5], 640, 240);


nodes[3].indices[2] = 1;
nodes[3].costs[2] = 5;
nodes[3].paths[2,0] = "MoveHorizontal";
nodes[3].paths[2,1] = ds_list_create();
ds_list_add(nodes[3].paths[2,1], 1120, 640);


nodes[4].indices[0] = 0;
nodes[4].costs[0] = 5;
nodes[4].paths[0,0] = "MoveHorizontal";
nodes[4].paths[0,1] = ds_list_create();
ds_list_add(nodes[4].paths[0,1], 120, 640);
  
nodes[4].indices[1] = 1;
nodes[4].costs[1] = 5;
nodes[4].paths[1,0] = "MoveHorizontal";
nodes[4].paths[1,1] = ds_list_create();
ds_list_add(nodes[4].paths[1,1], 620, 640);

nodes[4].indices[2] = 5;
nodes[4].costs[2] = 5; 
nodes[4].paths[2, 0] = "MoveHorizontal";
nodes[4].paths[2, 1] = ds_list_create();
ds_list_add(nodes[3].paths[2,1], 420, 440);
nodes[4].paths[2, 2] = "Jump";
nodes[4].paths[2, 3] = ds_list_create();
ds_list_add(nodes[4].paths[2,3], room_speed / 15, 540, 240);
nodes[4].paths[2, 4] = "MoveHorizontal";
nodes[4].paths[2, 5] = ds_list_create();
ds_list_add(nodes[4].paths[2,5], 640, 240);

nodes[5].indices[0] = 3;
nodes[5].costs[0] = 5;
nodes[5].paths[0, 0] = "MoveHorizontal";
nodes[5].paths[0,1] = ds_list_create();
ds_list_add(nodes[5].paths[0,1], 920, 440);

nodes[5].indices[1] = 4;
nodes[5].costs[1] = 5;
nodes[5].paths[0,0] = "MoveHorizontal"
nodes[5].paths[1,1] = ds_list_create();
ds_list_add(nodes[5].paths[0,1], 320, 440);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///For say command

sayList = ds_list_create();
sayX = ds_list_create();
sayY = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var x1;
var y1;
var val;

while (!ds_list_empty(sayList)) {

  x1 = sayX[| 0];
  y1 = sayY[| 0];
  val = sayList[| 0];
  draw_set_font(fontKaiju48);
  draw_set_color(c_white);
  //show_debug_message(string(x1) + ", " + string(y1) + ": " + string(val));
  draw_text(x1, y1 - 120, val);
  ds_list_delete(sayList, 0);
  ds_list_delete(sayX, 0);
  ds_list_delete(sayY, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
